stop("Please enter a valid province name in full form!")
}
request <- request_fun()
json_data <- content(request, as  = "parse")
all_active <- json_data$active
active_data <- data.frame()
for(i in 1:length(all_active)){
active_data <- rbind(active_data, data.frame(all_active[[i]]))
}
active_data <- active_data %>% rename(date = date_active) %>%
mutate(date, date = dmy(date)) %>%
mutate(province = replace(province, province %in% c("BC"), "British Columbia"),
province = replace(province, province %in% c("NL"), "Newfoundland and Labrador"),
province = replace(province, province %in% c("NWT"), "Northwest Territories"),
province = replace(province, province %in% c("PEI"), "Prince Edward Island"))
active_data <- active_data[,c(6,7,1:5)]
if(tolower(provinceName) == "canada"){
return(active_data)
} else {
active_data <- active_data %>%
filter(tolower(province) == tolower(provinceName))
return(active_data)
}
}
data <- active_cases('ALBERTA')
test_that("testing of active_cases", {
expected <- active_cases("Alberta")
expect_s3_class(expected, "data.frame")
})
test_that("testing of active_cases", {
expected <- active_cases("Alberta")
expect_equal(unique(expected$province), "Alberta")
})
test_that("testing of active_cases", {
expect_error(active_cases("BC"), "Please enter a valid province name in full form!")
})
prov = c("Alberta", "British Columbia", "Manitoba", "New Brunswick", "Newfoundland and Labrador", "Nova Scotia", "Nunavut", "Northwest Territories", "Ontario", "Prince Edward Island", "Quebec", "Saskatchewan", "Yukon", "Canada")
active_cases <- function(provinceName = 'Canada'){
#' @title  Returns a dataframe of active Covid-19 cases in desired province of Canada
#'
#' @description Perform data wrangling and cleaning using the API for the Covid-19 cases in Canada.
#' It processes the API and returns the data corresponding to one province which is passed on as the argument. If user passes empty      #' argument, so by default Canada is used which returns the data of whole Canada as a  whole.
#' The returned data is a data frame and contains the columns including the date, province name, active cases, change is active cases,
#' cumulative cases, cumulative deaths and cumulative recovered.
#'
#' @param provinceName a character/string depicting the name of the province
#'
#' @return Data frame for the Covid-19 active cases  corresponding to a particular province
#'
#' @examples active_cases("Alberta")
`%!in%` <- Negate(`%in%`)
if(tolower(provinceName) %!in% tolower(prov)){
stop("Please enter a valid province name in full form!")
}
request <- request_fun()
json_data <- content(request, as  = "parse")
all_active <- json_data$active
active_data <- data.frame()
for(i in 1:length(all_active)){
active_data <- rbind(active_data, data.frame(all_active[[i]]))
}
active_data <- active_data %>% rename(date = date_active) %>%
mutate(date, date = dmy(date)) %>%
mutate(province = replace(province, province %in% c("BC"), "British Columbia"),
province = replace(province, province %in% c("NL"), "Newfoundland and Labrador"),
province = replace(province, province %in% c("NWT"), "Northwest Territories"),
province = replace(province, province %in% c("PEI"), "Prince Edward Island"))
active_data <- active_data[,c(6,7,1:5)]
if(tolower(provinceName) == "canada"){
return(active_data)
} else {
active_data <- active_data %>%
filter(tolower(province) == tolower(provinceName))
return(active_data)
}
}
data <- active_cases('ALBERTA')
test_that("testing of active_cases", {
expected <- active_cases(provinceName='Alberta')
expect_match(prov, "Alberta")
})
test_that("testing of active_cases", {
#expected <- active_cases(provinceName='Alberta')
expect_match(prov, "Alberta")
})
active_cases <- function(provinceName = 'Canada'){
#' @title  Returns a dataframe of active Covid-19 cases in desired province of Canada
#'
#' @description Perform data wrangling and cleaning using the API for the Covid-19 cases in Canada.
#' It processes the API and returns the data corresponding to one province which is passed on as the argument. If user passes empty      #' argument, so by default Canada is used which returns the data of whole Canada as a  whole.
#' The returned data is a data frame and contains the columns including the date, province name, active cases, change is active cases,
#' cumulative cases, cumulative deaths and cumulative recovered.
#'
#' @param provinceName a character/string depicting the name of the province
#'
#' @return Data frame for the Covid-19 active cases  corresponding to a particular province
#'
#' @examples active_cases("Alberta")
prov = c("Alberta", "British Columbia", "Manitoba", "New Brunswick", "Newfoundland and Labrador", "Nova Scotia", "Nunavut", "Northwest Territories", "Ontario", "Prince Edward Island", "Quebec", "Saskatchewan", "Yukon", "Canada")
`%!in%` <- Negate(`%in%`)
if(tolower(provinceName) %!in% tolower(prov)){
stop("Please enter a valid province name in full form!")
}
request <- request_fun()
json_data <- content(request, as  = "parse")
all_active <- json_data$active
active_data <- data.frame()
for(i in 1:length(all_active)){
active_data <- rbind(active_data, data.frame(all_active[[i]]))
}
active_data <- active_data %>% rename(date = date_active) %>%
mutate(date, date = dmy(date)) %>%
mutate(province = replace(province, province %in% c("BC"), "British Columbia"),
province = replace(province, province %in% c("NL"), "Newfoundland and Labrador"),
province = replace(province, province %in% c("NWT"), "Northwest Territories"),
province = replace(province, province %in% c("PEI"), "Prince Edward Island"))
active_data <- active_data[,c(6,7,1:5)]
if(tolower(provinceName) == "canada"){
return(active_data)
} else {
active_data <- active_data %>%
filter(tolower(province) == tolower(provinceName))
return(active_data)
}
}
data <- active_cases('ALBERTA')
dim(active_data)
request_fun <- function(){
#' Function to make request to API and returns the response
url <- 'https://api.opencovid.ca/timeseries'
request <- GET(url)
return(request)
}
active_cases <- function(provinceName = 'Canada'){
#' @title  Returns a dataframe of active Covid-19 cases in desired province of Canada
#'
#' @description Perform data wrangling and cleaning using the API for the Covid-19 cases in Canada.
#' It processes the API and returns the data corresponding to one province which is passed on as the argument. If user passes empty      #' argument, so by default Canada is used which returns the data of whole Canada as a  whole.
#' The returned data is a data frame and contains the columns including the date, province name, active cases, change is active cases,
#' cumulative cases, cumulative deaths and cumulative recovered.
#'
#' @param provinceName a character/string depicting the name of the province
#'
#' @return Data frame for the Covid-19 active cases  corresponding to a particular province
#'
#' @examples active_cases("Alberta")
prov = c("Alberta", "British Columbia", "Manitoba", "New Brunswick", "Newfoundland and Labrador", "Nova Scotia", "Nunavut", "Northwest Territories", "Ontario", "Prince Edward Island", "Quebec", "Saskatchewan", "Yukon", "Canada")
`%!in%` <- Negate(`%in%`)
if(tolower(provinceName) %!in% tolower(prov)){
stop("Please enter a valid province name in full form!")
}
request <- request_fun()
json_data <- content(request, as  = "parse")
all_active <- json_data$active
active_data <- data.frame()
for(i in 1:length(all_active)){
active_data <- rbind(active_data, data.frame(all_active[[i]]))
}
active_data <- active_data %>% rename(date = date_active) %>%
mutate(date, date = dmy(date)) %>%
mutate(province = replace(province, province %in% c("BC"), "British Columbia"),
province = replace(province, province %in% c("NL"), "Newfoundland and Labrador"),
province = replace(province, province %in% c("NWT"), "Northwest Territories"),
province = replace(province, province %in% c("PEI"), "Prince Edward Island"))
active_data <- active_data[,c(6,7,1:5)]
if(tolower(provinceName) == "canada"){
return(active_data)
} else {
active_data <- active_data %>%
filter(tolower(province) == tolower(provinceName))
return(active_data)
}
}
data <- active_cases('ALBERTA')
dim(active_data)
dim(data)
class(dim(data))
typeof(dim(data))
length(data)
test_that("testing of active_cases", {
expect_that(dim(expected), "c(750,7)")
})
test_that("testing of active_cases", {
expect_that(dim(expected), "750 7)")
})
test_that("testing of active_cases", {
expect_that(length(expected), "7")
})
test_that("testing of active_cases", {
expect_that(length(expected), equals(7))
})
test_that("testing of active_cases", {
expected <- active_cases("Alberta")
expect_that(length(expected), equals(7))
})
nrow(expected)
nrow(data)
ncol(data)
knitr::opts_chunk$set(echo = TRUE)
summary_of_active_cases <- function(provinceName = 'Canada'){
#' @title Covid-19 particular day\'s individual summary for every Canadian province
#'
#' @description Summary for all the provinces relating to Covid-19 active cases, avaccine, cvaccine and dvaccine. Moreover, is discloses the count of people who have recovered and who were tested.
#' It processes the API and returns the json data corresponding to entered province. exceptional user input have been handled. If 'Canada' is passed as an argument the output displays the data for all the Canadian provinces.The returned data is a data frame and,
#'
#' @param provinceName (not abbreviated)
#'
#' @return Data frame with all the columns for the entire summary for all the provinces individually would be returned. The columns includes the date, province name, active_cases, active_cases_change, avaccine, cases,cumulative_avaccine, cumulative_cases,cumulative_cvaccine, cumulative_deaths,   cumulative_dvaccine, and cumulative_recovered, cumulative_testing, cvaccine, deaths, dvaccine recovered, testing and testing_info.
#'
#' @examples summary_of_active_cases("Ontario")
prov = c("Alberta", "British Columbia", "Manitoba", "New Brunswick", "Newfoundland and Labrador", "Nova Scotia", "Nunavut", "Northwest Territories", "Ontario", "Prince Edward Island", "Quebec", "Saskatchewan", "Yukon", "Canada")
`%!in%` <- Negate(`%in%`)  #taking care of the cases of letter
if(tolower(provinceName) %!in% tolower(prov)){
stop("Please enter a valid province name in full form!")
}
request <- request_fun()   #request to url
json_data <- content(request, as  = "parse")   #json for the url
active_data <- data.frame() #empty frame for appending
#data extraction
for(i in 1:length(json_data[[1]])){
active_data <- rbind(active_data, data.frame(json_data[[1]][[i]]))
}
#data wrangling
active_data <- active_data %>%
mutate(date, date = dmy(date)) %>%
mutate(province = replace(province, province %in% c("BC"), "British Columbia"),
province = replace(province, province %in% c("NL"), "Newfoundland and Labrador"),
province = replace(province, province %in% c("NWT"), "Northwest Territories"),
province = replace(province, province %in% c("PEI"), "Prince Edward Island"))
active_data <- active_data[,c(13,16,1:12,14:15,17:19)] #extracted keys
#sensitive case handling
if(tolower(provinceName) == "canada"){
return(active_data)
} else {
active_data <- active_data %>%
filter(tolower(province) == tolower(provinceName))
return(active_data)
}
}
data <- summary_of_active_cases('ONTARIO')
summary_of_active_cases <- function(provinceName = 'Canada'){
#' @title Covid-19 particular day\'s individual summary for every Canadian province
#'
#' @description Summary for all the provinces relating to Covid-19 active cases, avaccine, cvaccine and dvaccine. Moreover, is discloses the count of people who have recovered and who were tested.
#' It processes the API and returns the json data corresponding to entered province. exceptional user input have been handled. If 'Canada' is passed as an argument the output displays the data for all the Canadian provinces.The returned data is a data frame and,
#'
#' @param provinceName (not abbreviated)
#'
#' @return Data frame with all the columns for the entire summary for all the provinces individually would be returned. The columns includes the date, province name, active_cases, active_cases_change, avaccine, cases,cumulative_avaccine, cumulative_cases,cumulative_cvaccine, cumulative_deaths,   cumulative_dvaccine, and cumulative_recovered, cumulative_testing, cvaccine, deaths, dvaccine recovered, testing and testing_info.
#'
#' @examples summary_of_active_cases("Ontario")
prov = c("Alberta", "British Columbia", "Manitoba", "New Brunswick", "Newfoundland and Labrador", "Nova Scotia", "Nunavut", "Northwest Territories", "Ontario", "Prince Edward Island", "Quebec", "Saskatchewan", "Yukon", "Canada")
`%!in%` <- Negate(`%in%`)  #taking care of the cases of letter
if(tolower(provinceName) %!in% tolower(prov)){
stop("Please enter a valid province name in full form!")
}
request <- request_fun()   #request to url
json_data <- content(request, as  = "parse")   #json for the url
active_data <- data.frame() #empty frame for appending
#data extraction
for(i in 1:length(json_data[[1]])){
active_data <- rbind(active_data, data.frame(json_data[[1]][[i]]))
}
#data wrangling
active_data <- active_data %>%
mutate(date, date = dmy(date)) %>%
mutate(province = replace(province, province %in% c("BC"), "British Columbia"),
province = replace(province, province %in% c("NL"), "Newfoundland and Labrador"),
province = replace(province, province %in% c("NWT"), "Northwest Territories"),
province = replace(province, province %in% c("PEI"), "Prince Edward Island"))
active_data <- active_data[,c(13,16,1:12,14:15,17:19)] #extracted keys
#sensitive case handling
if(tolower(provinceName) == "canada"){
return(active_data)
} else {
active_data <- active_data %>%
filter(tolower(province) == tolower(provinceName))
return(active_data)
}
}
data <- summary_of_active_cases('ALBERTA')
request_fun <- function(){
#' @title Make Request to API url for content extraction
#'
#' @description The function will pass a get request to the url mentioned in the function and help in accessing the json/xml/html content of the web page. If the returned response code is 200 that means everything is good.
#' @param is none
#'
#' @returns the response
#' @example url = 'https://api.opencovid.ca/summary'
#'
url <- 'https://api.opencovid.ca/summary'
request <- GET(url)
return(request)
}
summary_of_active_cases <- function(provinceName = 'Canada'){
#' @title Covid-19 particular day\'s individual summary for every Canadian province
#'
#' @description Summary for all the provinces relating to Covid-19 active cases, avaccine, cvaccine and dvaccine. Moreover, is discloses the count of people who have recovered and who were tested.
#' It processes the API and returns the json data corresponding to entered province. exceptional user input have been handled. If 'Canada' is passed as an argument the output displays the data for all the Canadian provinces.The returned data is a data frame and,
#'
#' @param provinceName (not abbreviated)
#'
#' @return Data frame with all the columns for the entire summary for all the provinces individually would be returned. The columns includes the date, province name, active_cases, active_cases_change, avaccine, cases,cumulative_avaccine, cumulative_cases,cumulative_cvaccine, cumulative_deaths,   cumulative_dvaccine, and cumulative_recovered, cumulative_testing, cvaccine, deaths, dvaccine recovered, testing and testing_info.
#'
#' @examples summary_of_active_cases("Ontario")
prov = c("Alberta", "British Columbia", "Manitoba", "New Brunswick", "Newfoundland and Labrador", "Nova Scotia", "Nunavut", "Northwest Territories", "Ontario", "Prince Edward Island", "Quebec", "Saskatchewan", "Yukon", "Canada")
`%!in%` <- Negate(`%in%`)  #taking care of the cases of letter
if(tolower(provinceName) %!in% tolower(prov)){
stop("Please enter a valid province name in full form!")
}
request <- request_fun()   #request to url
json_data <- content(request, as  = "parse")   #json for the url
active_data <- data.frame() #empty frame for appending
#data extraction
for(i in 1:length(json_data[[1]])){
active_data <- rbind(active_data, data.frame(json_data[[1]][[i]]))
}
#data wrangling
active_data <- active_data %>%
mutate(date, date = dmy(date)) %>%
mutate(province = replace(province, province %in% c("BC"), "British Columbia"),
province = replace(province, province %in% c("NL"), "Newfoundland and Labrador"),
province = replace(province, province %in% c("NWT"), "Northwest Territories"),
province = replace(province, province %in% c("PEI"), "Prince Edward Island"))
active_data <- active_data[,c(13,16,1:12,14:15,17:19)] #extracted keys
#sensitive case handling
if(tolower(provinceName) == "canada"){
return(active_data)
} else {
active_data <- active_data %>%
filter(tolower(province) == tolower(provinceName))
return(active_data)
}
}
data <- summary_of_active_cases('ALBERTA')
length(data)
nrow(data)
data
class(data)
dim(data)
#Test cases
test_that("testing of active_cases", {
expected <- summary_of_active_cases("Ontario")
expect_that(expected, is_a("data.frame"))
})
test_that("testing of active_cases", {
expected <- active_cases("Ontario")
expect_equal(unique(expected$province), "Alberta")
})
test_that("testing of active_cases", {
expected <- summary_of_active_cases("Ontario")
expect_that(length(expected), equals(19))
})
test_that("testing of active_cases", {
expect_error(active_cases("BC"), "Please enter a valid province name in full form!")
})
#Test cases
test_that("testing of active_cases", {
expected <- summary_of_active_cases("Ontario")
expect_that(expected, is_a("data.frame"))
})
expect_equal(unique(expected$province), "Alberta")
#Test cases
test_that("testing of summary_of_cases", {
expect_that(expected, is_a("data.frame"))
expect_equal(unique(expected$province), "Alberta")
expected <- summary_of_cases("Ontario")
expect_that(length(expected), equals(19))
expect_error(active_cases("BC"), "Please enter a valid province name in full form!")
})
#Test cases
test_that("testing of summary_of_cases", {
expected <- summary_of_cases("Alberta")
expect_that(expected, is_a("data.frame"))
expect_equal(unique(expected$province), "Alberta")
expected <- summary_of_cases("Ontario")
expect_that(length(expected), equals(19))
expect_error(active_cases("BC"), "Please enter a valid province name in full form!")
})
request_fun <- function(){
#' @title Make Request to API url for content extraction
#'
#' @description The function will pass a get request to the url mentioned in the function and help in accessing the json/xml/html content of the web page. If the returned response code is 200 that means everything is good.
#' @param is none
#'
#' @returns the response
#' @example url = 'https://api.opencovid.ca/summary'
#'
url <- 'https://api.opencovid.ca/summary'
request <- GET(url)
return(request)
}
summary_of_cases <- function(provinceName = 'Canada'){
#' @title Covid-19 particular day\'s individual summary for every Canadian province
#'
#' @description Summary for all the provinces relating to Covid-19 active cases, avaccine, cvaccine and dvaccine. Moreover, is discloses the count of people who have recovered and who were tested.
#' It processes the API and returns the json data corresponding to entered province. exceptional user input have been handled. If 'Canada' is passed as an argument the output displays the data for all the Canadian provinces.The returned data is a data frame and,
#'
#' @param provinceName (not abbreviated)
#'
#' @return Data frame with all the columns for the entire summary for all the provinces individually would be returned. The columns includes the date, province name, active_cases, active_cases_change, avaccine, cases,cumulative_avaccine, cumulative_cases,cumulative_cvaccine, cumulative_deaths,   cumulative_dvaccine, and cumulative_recovered, cumulative_testing, cvaccine, deaths, dvaccine recovered, testing and testing_info.
#'
#' @examples summary_of_cases("Ontario")
prov = c("Alberta", "British Columbia", "Manitoba", "New Brunswick", "Newfoundland and Labrador", "Nova Scotia", "Nunavut", "Northwest Territories", "Ontario", "Prince Edward Island", "Quebec", "Saskatchewan", "Yukon", "Canada")
`%!in%` <- Negate(`%in%`)  #taking care of the cases of letter
if(tolower(provinceName) %!in% tolower(prov)){
stop("Please enter a valid province name in full form!")
}
request <- request_fun()   #request to url
json_data <- content(request, as  = "parse")   #json for the url
active_data <- data.frame() #empty frame for appending
#data extraction
for(i in 1:length(json_data[[1]])){
active_data <- rbind(active_data, data.frame(json_data[[1]][[i]]))
}
#data wrangling
active_data <- active_data %>%
mutate(date, date = dmy(date)) %>%
mutate(province = replace(province, province %in% c("BC"), "British Columbia"),
province = replace(province, province %in% c("NL"), "Newfoundland and Labrador"),
province = replace(province, province %in% c("NWT"), "Northwest Territories"),
province = replace(province, province %in% c("PEI"), "Prince Edward Island"))
active_data <- active_data[,c(13,16,1:12,14:15,17:19)] #extracted keys
#sensitive case handling
if(tolower(provinceName) == "canada"){
return(active_data)
} else {
active_data <- active_data %>%
filter(tolower(province) == tolower(provinceName))
return(active_data)
}
}
data <- summary_of_cases('ALBERTA')
#Test cases
test_that("testing of summary_of_cases", {
expected <- summary_of_cases("Alberta")
expect_that(expected, is_a("data.frame"))
expect_equal(unique(expected$province), "Alberta")
expected <- summary_of_cases("Ontario")
expect_that(length(expected), equals(19))
expect_error(active_cases("BC"), "Please enter a valid province name in full form!")
})
styler:::style_active_file()
# libraries imported
library(httr)
library(jsonlite)
library(dplyr)
library(lubridate)
library(testthat)
request_fun <- function(){
#' @title Make Request to API url for content extraction
#'
#' @description The function will pass a get request to the url mentioned in the function and help in accessing the json/xml/html content of the web page. If the returned response code is 200 that means everything is good.
#' @param is none
#'
#' @returns the response
#' @example url = 'https://api.opencovid.ca/summary?date=01-09-2020'
#'
url <- 'https://api.opencovid.ca/summary?date=01-09-2020'
request <- GET(url)
return(request)
}
summary_of_peaktime <- function(provinceName = "Canada") {
#' @title Covid-19 peak time which is September 2020 individual summary for every Canadian province
#'
#' @description Summary for all the provinces relating to Covid-19 peak time in Canada which is the month of September 2020 : the active cases, avaccine, cvaccine and dvaccine. Moreover, is discloses the count of people who have recovered and who were tested on September 01, 2020.
#' It processes the API and returns the json data corresponding to entered province. exceptional user input have been handled. If 'Canada' is passed as an argument the output displays the data for all the Canadian provinces.The returned data is a data frame and,
#'
#' @param provinceName (not abbreviated)
#'
#' @return Data frame with all the columns for the entire summary for all the provinces individually would be returned. The columns includes the date, province name, active_cases, active_cases_change, avaccine, cases,cumulative_avaccine, cumulative_cases,cumulative_cvaccine, cumulative_deaths,   cumulative_dvaccine, cumulative_recovered, cumulative_testing, cvaccine, deaths, dvaccine, recovered, testing and testing_info.
#'
#' @examples summary_of_peaktime("Ontario")
prov = c("Alberta", "British Columbia", "Manitoba", "New Brunswick", "Newfoundland and Labrador", "Nova Scotia", "Nunavut", "Northwest Territories", "Ontario", "Prince Edward Island", "Quebec", "Saskatchewan", "Yukon", "Canada")
`%!in%` <- Negate(`%in%`) # taking care of the cases of letter
if (tolower(provinceName) %!in% tolower(prov)) {
stop("Please enter a valid province name in full form!")
}
request <- request_fun() # request to url
json_data <- content(request, as = "parse") # json for the url
active_data <- data.frame() # empty frame for appending
# data extraction
for(i in 1:length(json_data[[1]])){
active_data <- rbind(active_data, data.frame(json_data[[1]][[i]]))
}
# dataframe wrangling
active_data <- active_data %>%
mutate(date, date = dmy(date)) %>%
mutate(province = replace(province, province %in% c("BC"), "British Columbia"),
province = replace(province, province %in% c("NL"), "Newfoundland and Labrador"),
province = replace(province, province %in% c("NWT"), "Northwest Territories"),
province = replace(province, province %in% c("PEI"), "Prince Edward Island"))
active_data <- active_data[,c(13,16,1:12,14:15,17:19)] #extracted keys
# sensitive case handling
if(tolower(provinceName) == "canada"){
return(active_data)
} else {
active_data <- active_data %>%
filter(tolower(province) == tolower(provinceName))
return(active_data)
}
}
data <- summary_of_peaktime('ONTARIO')
# Test cases
test_that("testing of summary_of_peaktime", {
expected <- summary_of_peaktime("Alberta")
expect_that(expected, is_a("data.frame"))
expect_equal(unique(expected$province), "Alberta")
expected <- summary_of_peaktime("Ontario")
expect_that(length(expected), equals(19))
expect_error(active_cases("BC"), "Please enter a valid province name in full form!")
})
